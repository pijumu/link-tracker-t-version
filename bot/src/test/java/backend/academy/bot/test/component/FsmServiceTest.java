package backend.academy.bot.test.component;

import static org.mockito.Mockito.when;

import backend.academy.dto.dto.LinkResponse;
import backend.academy.dto.dto.ListLinksResponse;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

public class FsmServiceTest extends FsmServiceContextTest {
    @Test
    @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ fsm –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ Idle —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
    void test1() {
        // Arrange
        String expected = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –∫–æ–º–∞–Ω–¥—É.";

        Long chatId = 1L;
        String invalidCommand = "/invalid";
        when(scrapperClient.isRegisteredChat(chatId)).thenReturn(true);

        // Act
        String message = fsmService.handle(invalidCommand, chatId);

        // Assert
        Assertions.assertEquals(expected, message);
    }

    @Test
    @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ fsm –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help –∏–∑ Idle —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
    void test2() {
        // Arrange
        String expected =
                """
            –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å—Å—ã–ª–æ–∫:
            https://github.com/{owner}/{repo}
            https://stackoverflow.com/questions/{questionId}

            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            /list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
            /start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–∞
            /track - –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            /untrack - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
            /help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
            """;

        Long chatId = 2L;
        String command = "/help";
        when(scrapperClient.isRegisteredChat(chatId)).thenReturn(true);

        // Act
        String message = fsmService.handle(command, chatId);

        // Assert
        Assertions.assertEquals(expected, message);
    }

    @Test
    @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ fsm –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help –∏–∑ NotRegistered —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
    void test3() {
        // Arrange
        String expected =
                """
            –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å—Å—ã–ª–æ–∫:
            https://github.com/{owner}/{repo}
            https://stackoverflow.com/questions/{questionId}

            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            /list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
            /start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–∞
            /track - –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            /untrack - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
            /help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
            """;

        Long chatId = 3L;
        String command = "/help";
        when(scrapperClient.isRegisteredChat(chatId)).thenReturn(false);

        // Act
        String message = fsmService.handle(command, chatId);

        // Assert
        Assertions.assertEquals(expected, message);
    }

    @Test
    @DisplayName(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ fsm –Ω–∞ –∫–æ–º–∞–Ω–¥—É /list –∏–∑ Idle —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ 2 —Å—Å—ã–ª–æ–∫. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π. –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
    void test4() {
        // Arrange
        String expected =
                """
            –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫:
            üÜî ID: 4
            üîó –°—Å—ã–ª–∫–∞: https://github.com/pijumu/ASL-Recognition-Model
            üè∑ –¢–µ–≥–∏: –Ω–µ —É–∫–∞–∑–∞–Ω—ã
            üéõ –§–∏–ª—å—Ç—Ä—ã: filter1, filter2

            üÜî ID: 4
            üîó –°—Å—ã–ª–∫–∞: https://github.com/TaTaTa/PuPuPU
            üè∑ –¢–µ–≥–∏: tag1, tag2
            üéõ –§–∏–ª—å—Ç—Ä—ã: –Ω–µ —É–∫–∞–∑–∞–Ω—ã

            """;

        Long chatId = 4L;
        String command = "/list";
        when(scrapperClient.isRegisteredChat(chatId)).thenReturn(true);
        when(scrapperClient.getLinks(chatId))
                .thenReturn(new ListLinksResponse(
                        List.of(
                                new LinkResponse(
                                        4L,
                                        "https://github.com/pijumu/ASL-Recognition-Model",
                                        Collections.emptyList(),
                                        List.of("filter1", "filter2")),
                                new LinkResponse(
                                        4L,
                                        "https://github.com/TaTaTa/PuPuPU",
                                        List.of("tag1", "tag2"),
                                        Collections.emptyList())),
                        2));

        // Act
        String message = fsmService.handle(command, chatId);

        // Assert
        Assertions.assertEquals(expected, message);
    }

    @Test
    @DisplayName(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ fsm –Ω–∞ –∫–æ–º–∞–Ω–¥—É /list –∏–∑ Idle —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π. –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
    void test5() {
        // Arrange
        String expected = "–í—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ —Å—Å—ã–ª–æ–∫.";

        Long chatId = 5L;
        String command = "/list";
        when(scrapperClient.isRegisteredChat(chatId)).thenReturn(true);
        when(scrapperClient.getLinks(chatId)).thenReturn(new ListLinksResponse(Collections.emptyList(), 0));

        // Act
        String message = fsmService.handle(command, chatId);

        // Assert
        Assertions.assertEquals(expected, message);
    }

    @Test
    @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è /track –∏–∑ Idle —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
    void test6() {
        // Arrange
        String expected1 = "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É.";
        String expected2 = "–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '-', –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–µ –Ω—É–∂–Ω—ã.";
        String expected3 = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '-', –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–µ –Ω—É–∂–Ω—ã.";
        String expected4 = "–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.";

        Long chatId = 6L;
        String command = "/track";
        String inputUrl = "https://github.com/pijumu/ASL-Recognition-Model";
        String inputFilters = "filter1";
        String inputTags = "-";
        when(scrapperClient.isRegisteredChat(chatId)).thenReturn(true);

        // Act
        String message1 = fsmService.handle(command, chatId);
        String message2 = fsmService.handle(inputUrl, chatId);
        String message3 = fsmService.handle(inputFilters, chatId);
        String message4 = fsmService.handle(inputTags, chatId);

        // Assert
        Assertions.assertEquals(expected1, message1);
        Assertions.assertEquals(expected2, message2);
        Assertions.assertEquals(expected3, message3);
        Assertions.assertEquals(expected4, message4);
    }

    @Test
    @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è /track –∏–∑ Idle —Å–æ—Å—Ç–æ—è–Ω–∏—è. –í–≤–æ–¥ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
    void test7() {
        // Arrange
        String expected1 = "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É.";
        String expected2 = "–°—Å—ã–ª–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –≤–∞–ª–∏–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –∫–æ–º–∞–Ω–¥—É.";

        Long chatId = 7L;
        String command = "/track";
        String inputUrl = "https://invalidLink.com";
        when(scrapperClient.isRegisteredChat(chatId)).thenReturn(true);

        // Act
        String message1 = fsmService.handle(command, chatId);
        String message2 = fsmService.handle(inputUrl, chatId);

        // Assert
        Assertions.assertEquals(expected1, message1);
        Assertions.assertEquals(expected2, message2);
    }
}
